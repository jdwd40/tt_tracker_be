openapi: 3.0.3
info:
  title: Time Tracker API
  version: 1.0.0
servers:
  - url: https://api.example.com
paths:
  /auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterReq' }
      responses:
        '201':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/RegisterRes' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequest' }

  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginReq' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/LoginRes' } },
              },
          }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshReq' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/AccessTokenRes' } },
              },
          }

  /subjects:
    get:
      summary: List subjects
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/SubjectsListRes' } },
              },
          }
    post:
      summary: Create subject
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubjectCreateReq' }
      responses:
        '201':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/SubjectRes' } },
              },
          }
        '409': { $ref: '#/components/responses/Conflict' }

  /subjects/{id}/rename:
    put:
      summary: Rename subject
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubjectRenameReq' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/SubjectRes' } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /subjects/join:
    post:
      summary: Join (merge) subjects and delete source
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubjectsJoinReq' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/SubjectsJoinRes' } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }

  /time-entries:
    get:
      summary: List time entries
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: start
          schema: { type: string, format: date }
        - in: query
          name: end
          schema: { type: string, format: date }
        - in: query
          name: subject_id
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200 }
      responses:
        '200':
          {
            description: OK,
            headers: { X-Total-Count: { schema: { type: integer } } },
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/TimeEntriesListRes' },
                  },
              },
          }
    post:
      summary: Create time entry (duration-only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TimeEntryCreateReq' }
      responses:
        '201':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/TimeEntryRes' } },
              },
          }
        '409':
          description: Conflict (latest entry exists on date)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TimeEntryConflictRes' }

  /time-entries/{id}:
    put:
      summary: Update time entry
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TimeEntryUpdateReq' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/TimeEntryRes' } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete time entry (hard)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }

  /reports/daily:
    get:
      summary: Daily totals
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: start
          required: true
          schema: { type: string, format: date }
        - in: query
          name: end
          required: true
          schema: { type: string, format: date }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/DailyReportRes' } },
              },
          }

  /reports/weekly:
    get:
      summary: Weekly totals (ISO week, Monday start)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: start
          required: true
          schema: { type: string, format: date }
        - in: query
          name: end
          required: true
          schema: { type: string, format: date }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/WeeklyReportRes' } },
              },
          }

  /reports/monthly:
    get:
      summary: Monthly totals
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: start
          required: true
          schema: { type: string, format: date }
        - in: query
          name: end
          required: true
          schema: { type: string, format: date }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/MonthlyReportRes' } },
              },
          }

  /reports/subject-leaderboard:
    get:
      summary: Subject leaderboard
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: start
          required: true
          schema: { type: string, format: date }
        - in: query
          name: end
          required: true
          schema: { type: string, format: date }
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/LeaderboardRes' } },
              },
          }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }

  responses:
    BadRequest: { description: Bad Request }
    Unauthorized:{ description: Unauthorized }
    NotFound: { description: Not Found }
    Conflict: { description: Conflict }

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
          required: [code, message]

    RegisterReq:
      {
        type: object,
        properties:
          {
            email: { type: string, format: email },
            password: { type: string, minLength: 8 },
          },
        required: [email, password],
      }
    RegisterRes:
      {
        type: object,
        properties:
          {
            data:
              {
                type: object,
                properties: { user_id: { type: string } },
                required: [user_id],
              },
          },
        required: [data],
      }

    LoginReq:
      {
        type: object,
        properties:
          {
            email: { type: string, format: email },
            password: { type: string },
          },
        required: [email, password],
      }
    LoginRes:
      type: object
      properties:
        data:
          type: object
          properties:
            access_token: { type: string }
            refresh_token: { type: string }
          required: [access_token, refresh_token]
      required: [data]

    RefreshReq:
      {
        type: object,
        properties: { refresh_token: { type: string } },
        required: [refresh_token],
      }
    AccessTokenRes:
      {
        type: object,
        properties:
          {
            data:
              {
                type: object,
                properties: { access_token: { type: string } },
                required: [access_token],
              },
          },
        required: [data],
      }

    SubjectCreateReq:
      {
        type: object,
        properties:
          {
            name: { type: string, minLength: 1, maxLength: 60 },
            color: { type: string },
          },
        required: [name],
      }
    SubjectRenameReq:
      {
        type: object,
        properties: { new_name: { type: string, minLength: 1, maxLength: 60 } },
        required: [new_name],
      }
    Subject:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        color: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, name]
    SubjectRes:
      {
        type: object,
        properties: { data: { $ref: '#/components/schemas/Subject' } },
        required: [data],
      }
    SubjectsListRes:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Subject' }
      required: [data]

    TimeEntryCreateReq:
      type: object
      properties:
        subject_id: { type: string }
        subject_name: { type: string }
        date: { type: string, format: date }
        duration_minutes: { type: integer, minimum: 1, maximum: 1440 }
        notes: { type: string, maxLength: 500 }
        overwrite_latest_overlap: { type: boolean }
      required: [duration_minutes]
      anyOf:
        - required: [subject_id]
        - required: [subject_name]

    TimeEntryUpdateReq:
      type: object
      properties:
        subject_id: { type: string }
        date: { type: string, format: date }
        duration_minutes: { type: integer, minimum: 1, maximum: 1440 }
        notes: { type: string, maxLength: 500 }

    TimeEntry:
      type: object
      properties:
        id: { type: string }
        subject_id: { type: string }
        subject_name: { type: string }
        date: { type: string, format: date }
        duration_minutes: { type: integer }
        notes: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, subject_id, date, duration_minutes]

    TimeEntryRes:
      {
        type: object,
        properties: { data: { $ref: '#/components/schemas/TimeEntry' } },
        required: [data],
      }
    TimeEntriesListRes:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/TimeEntry' }
      required: [data]

    TimeEntryConflictRes:
      type: object
      properties:
        error: { $ref: '#/components/schemas/Error' }
        latest_entry: { $ref: '#/components/schemas/TimeEntry' }
        hint: { type: string }

    DailyReportRes:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              date: { type: string, format: date }
              subject_id: { type: string }
              subject_name: { type: string }
              minutes: { type: integer }
            required: [date, subject_id, minutes]
      required: [data]

    WeeklyReportRes:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              week_start: { type: string, format: date }
              subject_id: { type: string }
              subject_name: { type: string }
              minutes: { type: integer }
            required: [week_start, subject_id, minutes]
      required: [data]

    MonthlyReportRes:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              month: { type: string, pattern: '^[0-9]{4}-[0-9]{2}$' }
              subject_id: { type: string }
              subject_name: { type: string }
              minutes: { type: integer }
            required: [month, subject_id, minutes]
      required: [data]

    LeaderboardRes:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              subject_id: { type: string }
              subject_name: { type: string }
              minutes: { type: integer }
            required: [subject_id, minutes]
      required: [data]

    SubjectsJoinReq:
      type: object
      properties:
        source_subject_id: { type: string }
        target_subject_id: { type: string }
        delete_source: { type: boolean, default: true }
      required: [source_subject_id, target_subject_id]

    SubjectsJoinRes:
      type: object
      properties:
        data:
          type: object
          properties:
            moved_count: { type: integer }
          required: [moved_count]
      required: [data]
